#!/bin/bash -ex

. ${EKB_BASELIB}


# Exit not installing Kolibri content
if [ -z "${EKB_KOLIBRI_INSTALL_CHANNELS}" ]; then
  exit 0
fi

export KOLIBRI_HOME="${EKB_CONTENT_DIR}/kolibri-content"
ekb_recreate_dir "${KOLIBRI_HOME}"

apps_url=$(
  curl -sSL https://api.github.com/repos/endlessm/kolibri-explore-plugin/releases/tags/v${EKB_KOLIBRI_EXPLORE_PLUGIN_VERSION} |
  jq -r '.assets[] | select(.name == "apps-bundle.zip") | .browser_download_url'
)

KOLIBRI_VENV_DIR="${EKB_TMP_DIR}/kolibri-content-venv"
python3 -m venv ${KOLIBRI_VENV_DIR}
source ${KOLIBRI_VENV_DIR}/bin/activate

cp "${EKB_DATA_DIR}/kolibri/options.ini" "${EKB_DATA_DIR}/kolibri/automatic_provision.json" -t "${KOLIBRI_HOME}"

pip install "kolibri==${EKB_KOLIBRI_VERSION}"
pip install "kolibri-explore-plugin==${EKB_KOLIBRI_EXPLORE_PLUGIN_VERSION}"
pip install "kolibri-zim-plugin==${EKB_KOLIBRI_ZIM_PLUGIN_VERSION}"

kolibri plugin enable kolibri.plugins.app
kolibri plugin disable kolibri.plugins.learn
kolibri plugin enable kolibri_explore_plugin
kolibri plugin enable kolibri_zim_plugin

# Install the explore plugin and zim plugin in ${KOLIBRI_HOME}/extensions.
# The zim plugin is bundled with the application.
pip install "kolibri-explore-plugin==${EKB_KOLIBRI_EXPLORE_PLUGIN_VERSION}" --target="${KOLIBRI_HOME}/extensions" --platform=win_amd64 --only-binary=:all:
pip install "kolibri-zim-plugin==${EKB_KOLIBRI_ZIM_PLUGIN_VERSION}" --target="${KOLIBRI_HOME}/extensions" --platform=win_amd64 --only-binary=:all:

# Install apps bundle
ekb_download_file "${apps_url}" "${EKB_TMP_DIR}/apps-bundle.zip"
unzip -o -d "${KOLIBRI_HOME}/extensions/kolibri_explore_plugin" "${EKB_TMP_DIR}/apps-bundle.zip"

# Populate the Kolibri home directory

# Use a separate content URL if configured.
if [ -n "${EKB_KOLIBRI_CENTRAL_CONTENT_BASE_URL}" ]; then
  KOLIBRI_CENTRAL_CONTENT_BASE_URL="${EKB_KOLIBRI_CENTRAL_CONTENT_BASE_URL}"
  export KOLIBRI_CENTRAL_CONTENT_BASE_URL
fi

import_kolibri_channel()
{
  local channel_id=$1
  local channel_include_node_ids_var="EKB_KOLIBRI_${channel_id^^}_INCLUDE_NODE_IDS"
  local channel_exclude_node_ids_var="EKB_KOLIBRI_${channel_id^^}_EXCLUDE_NODE_IDS"
  local importcontent_opts=(
    # Normally importcontent ignores download errors. Make it fail so we
    # can be sure we've fully provisioned channels.
    --fail-on-error
  )
  local importcontent_network_opts=(
    # The default timeout is 60 seconds, but downloading can be slow
    # when objects aren't in our content CDN yet.
    --timeout 300
  )

  if [ -n "${!channel_include_node_ids_var}" ]; then
    importcontent_include_nodes=$(echo "${!channel_include_node_ids_var}" | xargs | tr -s ' ' ',')
    importcontent_opts+=(--node_ids="${importcontent_include_nodes}")
  fi

  if [ -n "${!channel_exclude_node_ids_var}" ]; then
    importcontent_exclude_nodes=$(echo "${!channel_exclude_node_ids_var}" | xargs | tr -s ' ' ',')
    importcontent_opts+=(--exclude_node_ids="${importcontent_exclude_nodes}")
  fi

  kolibri manage importchannel network "${channel_id}"
  kolibri manage importcontent "${importcontent_opts[@]}" \
    network "${importcontent_network_opts[@]}" "${channel_id}"
}

for channel_id in ${EKB_KOLIBRI_INSTALL_CHANNELS}; do
  import_kolibri_channel "${channel_id}"
done

# Sort channels in the same order as in EKB_KOLIBRI_INSTALL_CHANNELS
position=1
for channel_id in ${EKB_KOLIBRI_INSTALL_CHANNELS}; do
  kolibri manage setchannelposition ${channel_id} ${position} || true
  let position=position+1
done

swap_placeholder() {
  local content_id=${1:?No content_id supplied to ${FUNCNAME}}
  local download_url=${2:?No download_url supplied to ${FUNCNAME}}
  local placeholder_file="${KOLIBRI_HOME}/content/storage/${content_id:0:1}/${content_id:1:1}/${content_id}"

  if [ -f "${placeholder_file}" ]; then
    ekb_download_file "${download_url}" "${EKB_TMP_DIR}/${content_id}"
    cp -f "${EKB_TMP_DIR}/${content_id}" "${placeholder_file}"
  fi
}

swap_placeholder_by_id() {
  local placeholder_id=${1//[^[:alnum:]]/_}

  local placeholder_filename_var="EKB_KOLIBRI_PLACEHOLDER_${placeholder_id^^}_STORAGE_FILENAME"
  local placeholder_download_url_var="EKB_KOLIBRI_PLACEHOLDER_${placeholder_id^^}_DOWNLOAD_URL"

  if [ -n "${!placeholder_filename_var}" ] && [ -n "${!placeholder_download_url_var}" ]; then
    swap_placeholder "${!placeholder_filename_var}" "${!placeholder_download_url_var}"
  fi
}

# Replace placeholder zim files with the real ones
if [ -n "${EKB_KOLIBRI_CONTENT_PLACEHOLDERS}" ]; then
  for placeholder_id in ${EKB_KOLIBRI_CONTENT_PLACEHOLDERS}; do
    swap_placeholder_by_id "${placeholder_id}"
  done
fi

# Generate index files for zim files in ${KOLIBRI_HOME}

endless_key_kolibri_content_generate_zim_index() {
  find "${KOLIBRI_HOME}/content/storage" -name "*.zim" \
  | xargs -n 1 python3 "${EKB_HELPERS_DIR}/generate-zimply-index"
}

endless_key_kolibri_content_generate_zim_index "$@"

# Empty the user database, and ensure that each instance of this image has a
# unique Facility ID.
# <https://kolibri.readthedocs.io/en/latest/install/provision.html#prepare-the-kolibri-folder-for-copying>
(echo yes; echo yes) | kolibri manage deprovision

# Clean local data
rm -rf "${KOLIBRI_HOME}/process_cache"
rm -rf "${KOLIBRI_HOME}/logs"
rm -rf "${KOLIBRI_HOME}/sessions"

# Install the Kolibri home directory to the right location
kolibri_data_dir="${EKB_TARGET_DIR}/KOLIBRI_DATA"
ekb_recreate_dir ${kolibri_data_dir}
mv "${KOLIBRI_HOME}/content" "${kolibri_data_dir}"
mv "${KOLIBRI_HOME}/extensions" "${kolibri_data_dir}"
mv "${KOLIBRI_HOME}" "${kolibri_data_dir}/preseeded_kolibri_home"
